---
import type { KnownLanguageCode, SidebarItem } from "../../i18n";

import { getCollection } from "astro:content";
import { SITE } from "../../site";

type Props = {
	currentPage: string;
	langCode: KnownLanguageCode;
	version?: string;
};

const { currentPage, langCode, version } = Astro.props;
const currentPageMatch = currentPage.endsWith("/")
	? currentPage.slice(1, -1)
	: currentPage.slice(1);
const slug = currentPage.slice(currentPage.indexOf(langCode) + langCode.length);
let sidebar = SITE[langCode].sidebar ?? {};
if (typeof version === "string" && version in sidebar) {
	const versionedSidebar = sidebar[version];
	if (!Array.isArray(versionedSidebar) && versionedSidebar !== undefined) {
		sidebar = versionedSidebar;
	}
}

const sidebarSlug =
	Object.keys(sidebar).find((sectionSlug) => slug.startsWith(sectionSlug)) ??
	"";
const activeSidebar = sidebar[sidebarSlug];

const docs = await getCollection("docs");

function resolveId(partialId: string) {
	return [
		langCode,
		partialId.startsWith("/") ? "" : "/",
		partialId,
		partialId.endsWith("/") ? "index.md" : "",
	].join("");
}

function resolveSlug(slug?: string) {
	if (typeof slug !== "string") {
		return slug;
	}

	if (slug.startsWith(langCode.toLowerCase())) {
		slug = slug.replace(langCode.toLowerCase(), langCode);
	}

	if (!slug.endsWith("/")) {
		slug += "/";
	}

	slug = `/${slug}`;
	return slug;
}
---

<aside id="sidebar" class="sidebar" title="Site Navigation">
	<nav aria-labelledby="sidebar">
		<ul class="nav-groups">
			{
				Array.isArray(activeSidebar) &&
					activeSidebar.map(async function renderItem(
						item: SidebarItem
					) {
						if (typeof item === "string") {
							const entry = docs.find(
								({ id }) => id === resolveId(item)
							);
							return (
								<li>
									<a href={resolveSlug(entry?.slug)}>
										{entry?.data.title ?? item}
									</a>
								</li>
							);
						}

						if ("children" in item) {
							const { children, title } = item;
							return (
								<li>
									<div class="nav-group">
										<h2>{title}</h2>
										<ul>{children.map(renderItem)}</ul>
									</div>
								</li>
							);
						}

						const { link, name, title, type } = item;
						const isCurrentPage =
							currentPageMatch === link ? "page" : false;
						const className = isCurrentPage ? "current" : undefined;

						return (
							<li>
								<a
									aria-current={isCurrentPage}
									class={className}
									href={`${langCode}${link}`}
									id={name}
									type={type}
								>
									{title}
								</a>
							</li>
						);
					})
			}
		</ul>
	</nav>
</aside>

<script is:inline>
	window.addEventListener("DOMContentLoaded", () => {
		var target = document.querySelector('[aria-current="page"]');
		if (target && target.offsetTop > window.innerHeight - 100) {
			document.querySelector(".nav-groups").scrollTop = target.offsetTop;
		}
	});
</script>

<style>
	.sidebar {
		grid-area: sidebar;
		height: fit-content;
		max-height: calc(100vh - var(--theme-navbar-height));
		overflow-y: auto;
		padding: var(--doc-padding);
		position: sticky;
		top: var(--theme-navbar-height);
		width: fit-content;
	}

	nav {
		width: fit-content;
	}

	.nav-groups {
		height: 100%;
		width: fit-content;
	}

	.nav-groups > li + li {
		margin-top: 2rem;
		width: fit-content;
	}

	.nav-group-title {
		font-size: 1rem;
		font-weight: 700;
		padding: 0.1rem 1rem;
		text-transform: uppercase;
		margin-bottom: 0.5rem;
	}

	.nav-link a {
		font-size: 1rem;
		margin: 1px;
		padding: 0.3rem 1rem;
		font: inherit;
		color: inherit;
		text-decoration: none;
		display: block;
	}

	.nav-link a:hover,
	.nav-link a:focus {
		background-color: var(--theme-bg-hover);
	}

	.nav-link a[aria-current="page"] {
		color: var(--theme-text-accent);
		background-color: var(--theme-bg-accent);
		font-weight: 600;
	}

	@media (max-width: 1280px) {
		.menu-toggle {
			display: initial;
		}

		aside.sidebar {
			display: none;
		}
	}
</style>

<style is:global>
	:root.theme-dark .nav-link a[aria-current="page"] {
		color: hsla(var(--color-base-white), 100%, 1);
	}
</style>
