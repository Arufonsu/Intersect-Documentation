---
type Props = {
	animation?: 'inner-spin' | 'none';
};

const { animation } = Astro.props;

const containerClassName = ['logo intersect parts', animation].join(' ').trim();
---

{
	animation && (
		<div class={containerClassName}>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				xmlns:xlink="http://www.w3.org/1999/xlink"
				id="intersect-logo-2022"
				data-name="intersect-logo-2022"
				class="logo intersect outer"
				viewBox="0 0 512 512"
			>
				<path
					id="logo-outer"
					data-name="logo-outer"
					d="M104.052,373.247L34,384,255.5,512,477,384l-70.052-10.753A998.191,998.191,0,0,0,104.052,373.247ZM78.329,328.654L34,384V128L255.5,0,229.778,66.1A1000.23,1000.23,0,0,1,78.329,328.654ZM281.223,66.1L255.5,0,477,128V384l-44.33-55.346A1000.192,1000.192,0,0,1,281.223,66.1Z"
				/>
			</svg>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				xmlns:xlink="http://www.w3.org/1999/xlink"
				id="intersect-logo-2022"
				data-name="intersect-logo-2022"
				class="logo intersect inner"
				viewBox="0 0 512 512"
			>
				<path
					id="logo-inner"
					data-name="logo-inner"
					d="M388.4,332.8h0a875.94,875.94,0,0,0-265.8,0h0A877.741,877.741,0,0,0,255.5,102.4h0A877.717,877.717,0,0,0,388.4,332.8Z"
				/>
			</svg>
		</div>
	)
}

{
	(!animation || animation === 'none') && (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			xmlns:xlink="http://www.w3.org/1999/xlink"
			id="intersect-logo-2022"
			data-name="intersect-logo-2022"
			class="logo intersect"
			viewBox="0 0 512 512"
		>
			<path
				id="logo"
				data-name="logo"
				d="M388.4,332.8h0a875.94,875.94,0,0,0-265.8,0h0A877.741,877.741,0,0,0,255.5,102.4h0A877.717,877.717,0,0,0,388.4,332.8ZM104.052,373.247L34,384,255.5,512,477,384l-70.052-10.753A998.191,998.191,0,0,0,104.052,373.247ZM78.329,328.654L34,384V128L255.5,0,229.778,66.1A1000.23,1000.23,0,0,1,78.329,328.654ZM281.223,66.1L255.5,0,477,128V384l-44.33-55.346A1000.192,1000.192,0,0,1,281.223,66.1Z"
			/>
		</svg>
	)
}

<style>
	.logo.intersect {
		/* --size: 16em;
		width: var(--size);
		height: var(--size); */
	}

	.parts {
		position: relative;
	}

	.parts > svg {
		position: absolute;
	}

	.inner-spin .inner {
		animation: rotate-and-scale 6s infinite linear;
		/* background-color: red; */
		/* transform-origin: calc(var(--size) / 2); */
	}

	@keyframes rotate-and-scale {
		0% {
			transform: rotate(0deg);
		}

		16.6% {
			transform: rotate(60deg) scale(0.5);
		}

		33% {
			transform: rotate(120deg);
		}

		50% {
			transform: rotate(180deg) scale(0.5);
		}

		66.6% {
			transform: rotate(240deg);
		}

		83.2% {
			transform: rotate(300deg) scale(0.5);
		}

		100% {
			transform: rotate(360deg);
		}
		/* 0% {
			transform: rotate(0deg);
		}

		16.6% {
			transform: rotate(60deg) scale(0.5);
		}

		33% {
			transform: rotate(60deg) scale(1);
		}

		50% {
			transform: rotate(60deg) scale(0.5);
		}

		66.6% {
			transform: rotate(60deg) scale(1);
		}

		83.2% {
			transform: rotate(60deg) scale(1);
		}

		100% {
			transform: rotate(360deg);
		} */
	}
</style>
